# 1. simple row_key
## 1.1 equal
- sql: select age from users
  parse_success:
    - "users"
    - ["age"]
    - []
    - {}
  compose_error: "row_key partition: _row_key is required"
- sql: select age from users where "_row_key" = "abc"
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key"]
    - {"_row_key": ["abc"]}
  compose_success:
    - "abc"
- sql: select age from users where "_row_key" = 'abc'
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key"]
    - {"_row_key": ["abc"]}
  compose_success:
    - "abc"
- sql: select age from users where "_row_key" = 1
  parse_error: "selection (_row_key): row identifier only support string value"
- sql: select age from users where "_row_key" = 'abc' and "_row_key" = 'def'
  parse_error: "selection: _row_key is duplicated"
- sql: select *, age from users where "_row_key" = 'abc'
  parse_success:
    - "users"
    - ["Wildcard"]
    - ["_row_key"]
    - {"_row_key": ["abc"]}
  compose_success:
    - "abc"
### 1.1.1 predicate on qualifiers
- sql: select age from users where "_row_key" = 'abc' and gender = 'M'
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key", "gender"]
    - {"_row_key": ["abc"], "gender": ["M"]}
  compose_success:
    - "abc"
  compose_predicates:
    - !!python/tuple ["M", "M", true, true]
- sql: select age from users where "_row_key" = 'abc' and age BETWEEN 1 and 10
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key", "age"]
    - {"_row_key": ["abc"], "age": !!python/tuple [1, 10, true, true]}
  compose_success:
    - "abc"
  compose_predicates:
    - !!python/tuple [1, 10, true, true]
- sql: select age from users where "_row_key" = 'abc' and age >= 1
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key", "age"]
    - {"_row_key": ["abc"], "age": !!python/tuple [1, null, true, null]}
  compose_success:
    - "abc"
  compose_predicates:
    # if end_value is None, python bigtable SDK requires inclusive_end is None in input
    # however, python bigtable SDK transform inclusive_end from None to True in output
    # https://github.com/googleapis/python-bigtable/blob/b02ec9c6d4a0ade1a6228da9107580831707a391/google/cloud/bigtable/row_filters.py#L526-L531
    - !!python/tuple [1, null, true, true]
- sql: select age from users where "_row_key" = 'abc' and age <= 1
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key", "age"]
    - {"_row_key": ["abc"], "age": !!python/tuple [null, 1, null, true]}
  compose_success:
    - "abc"
  compose_predicates:
    - !!python/tuple [null, 1, true, true]
- sql: select age from users where "_row_key" = 'abc' and age >= 1 and age <= 10
  parse_error: "selection: age is duplicated"
- sql: select age from users where "_row_key" = 'abc' and age < 1
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key", "age"]
    - {"_row_key": ["abc"], "age": !!python/tuple [null, 1, null, false]}
  compose_success:
    - "abc"
  compose_predicates:
    - !!python/tuple [null, 1, true, false]
- sql: select age from users where "_row_key" = 'abc' and age > 1
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key", "age"]
    - {"_row_key": ["abc"], "age": !!python/tuple [1, null, false, null]}
  compose_success:
    - "abc"
  compose_predicates:
    - !!python/tuple [1, null, false, true]
- sql: select age from users where "_row_key" = 'abc' and age >= 1.1
  parse_error: "selection (age): qualifier only support string and integer value"
## 1.2 IN and BETWEEN
- sql: select age from users where "_row_key" in ('abc', 'def')
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key"]
    - {"_row_key": ["abc", "def"]}
  compose_success:
    - "abc"
    - "def"
- sql: select age from users where "_row_key" between 'abc' and 'def'
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key"]
    - {"_row_key": !!python/tuple ["abc", "def", true, true]}
  compose_success:
    - !!python/tuple ["abc", "def", true, true]
- sql: select age from users where "_row_key" >= 'abc' and "_row_key" <= 'def'
  parse_error: "selection (_row_key): only InList, Between and BinaryOp are supported"
# 2. composite row_keys
- sql: select pressure from balloons where "device_id" = '3698' and event_minute = '2021-03-05-1200'
  parse_success:
    - "balloons"
    - ["pressure"]
    - ["device_id", "event_minute"]
    - {"device_id": ["3698"], "event_minute": ["2021-03-05-1200"]}
  compose_success:
    - "3698#2021-03-05-1200"
- sql: select pressure from balloons where "device_id" IN ('3698', '3700') and event_minute BETWEEN '2021-03-05-1200' and '2021-03-05-1204'
  parse_success:
    - "balloons"
    - ["pressure"]
    - ["device_id", "event_minute"]
    - device_id: ["3698", "3700"]
      event_minute: !!python/tuple ["2021-03-05-1200", "2021-03-05-1204", true, true]
  compose_success:
    - !!python/tuple ["3698#2021-03-05-1200", "3698#2021-03-05-1204", true, true]
    - !!python/tuple ["3700#2021-03-05-1200", "3700#2021-03-05-1204", true, true]
- sql: select pressure from balloons where "device_id" BETWEEN '3698' AND '3700' and event_minute = '2021-03-05-1200'
  parse_success:
    - "balloons"
    - ["pressure"]
    - ["device_id", "event_minute"]
    - device_id: !!python/tuple ["3698", "3700", true, true]
      event_minute: ["2021-03-05-1200"]
  compose_error: "row_key partition: prefix device_id only support '=' and 'IN'"
# 3. functions
- sql: select avg(age) from users where "_row_key" between 'abc' and 'def'
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key"]
    - {"_row_key": !!python/tuple ["abc", "def", true, true]}
  compose_success:
    - !!python/tuple ["abc", "def", true, true]
- sql: select age as year from users where "_row_key" between 'abc' and 'def'
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key"]
    - {"_row_key": !!python/tuple ["abc", "def", true, true]}
  compose_success:
    - !!python/tuple ["abc", "def", true, true]
- sql: select avg(age) as avg_age from users where "_row_key" between 'abc' and 'def'
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key"]
    - {"_row_key": !!python/tuple ["abc", "def", true, true]}
  compose_success:
    - !!python/tuple ["abc", "def", true, true]
- sql: select age + 1 from users where "_row_key" between 'abc' and 'def'
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key"]
    - {"_row_key": !!python/tuple ["abc", "def", true, true]}
  compose_success:
    - !!python/tuple ["abc", "def", true, true]
- sql: select 1 + age from users where "_row_key" between 'abc' and 'def'
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key"]
    - {"_row_key": !!python/tuple ["abc", "def", true, true]}
  compose_success:
    - !!python/tuple ["abc", "def", true, true]
- sql: select age + 1 as age_plus from users where "_row_key" between 'abc' and 'def'
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key"]
    - {"_row_key": !!python/tuple ["abc", "def", true, true]}
  compose_success:
    - !!python/tuple ["abc", "def", true, true]
- sql: select cast(age as int) from users where "_row_key" between 'abc' and 'def'
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key"]
    - {"_row_key": !!python/tuple ["abc", "def", true, true]}
  compose_success:
    - !!python/tuple ["abc", "def", true, true]
- sql: select avg(cast(age as int)) as avg_age from users where "_row_key" between 'abc' and 'def'
  parse_success:
    - "users"
    - ["age"]
    - ["_row_key"]
    - {"_row_key": !!python/tuple ["abc", "def", true, true]}
  compose_success:
    - !!python/tuple ["abc", "def", true, true]
